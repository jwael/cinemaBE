@Test
fun `should process role creation successfully`() {
    val roleData = CrmRoleData(
        reconciliationId = ReconciliationId.parse("REF1234567-ROW1234567"),
        batchId = "BATCH1234567",
        rowNumber = 1,
        crmCustomerData = CrmCLsCustomerData(
            id = "CUST001",
            batchId = "BATCH1234567",
            reconciliationId = ReconciliationId.parse("REF1234567-ROW1234567"),
            rowNumber = 1,
            rowReference = ReferenceId("ROW1234567"),
            crmData = CrmData(forename = "Marine", surname = "Dubois"),
            clsData = emptyMap(),
            crmInsertedId = "CRM001"
        ),
        crmContactData = CrmClsContactData(
            id = "CONT001",
            batchId = "BATCH1234567",
            reconciliationId = ReconciliationId.parse("REF1234567-ROW1234567"),
            rowNumber = 2,
            rowReference = ReferenceId("ROW1234568"),
            crmData = CrmData(forename = "Paul", surname = "Martin"),
            clsData = emptyMap(),
            crmInsertedId = "CRM002"
        )
    )

    val payload = crmCustomerProvider.createRole(roleData)

    assertEquals(RecordStepStatus.OK, payload.crmStatus)
    assertEquals("Role created", payload.crmMessage)
    assertNotNull(payload.crmRoleId)
}

@Test
fun `should process role update successfully`() {
    val roleData = CrmRoleData(
        reconciliationId = ReconciliationId.parse("REF1234567-ROW1234567"),
        batchId = "BATCH1234567",
        rowNumber = 1,
        crmCustomerData = CrmCLsCustomerData(
            id = "CUST001",
            batchId = "BATCH1234567",
            reconciliationId = ReconciliationId.parse("REF1234567-ROW1234567"),
            rowNumber = 1,
            rowReference = ReferenceId("ROW1234567"),
            crmData = CrmData(forename = "Marine", surname = "Dubois"),
            clsData = emptyMap(),
            crmInsertedId = "CRM001"
        ),
        crmContactData = CrmClsContactData(
            id = "CONT001",
            batchId = "BATCH1234567",
            reconciliationId = ReconciliationId.parse("REF1234567-ROW1234567"),
            rowNumber = 2,
            rowReference = ReferenceId("ROW1234568"),
            crmData = CrmData(forename = "Paul", surname = "Martin"),
            clsData = emptyMap(),
            crmInsertedId = "CRM002"
        )
    )

    val payload = crmCustomerProvider.updateRole(roleData)

    assertEquals(RecordStepStatus.OK, payload.crmStatus)
    assertEquals("Role updated", payload.crmMessage)
    assertNotNull(payload.crmRoleId)
}