import kotlin.test.*
import com.arval.blm.core.domain.model.crm.*
import com.arval.blm.core.domain.model.ReconciliationId
import com.arval.blm.core.domain.model.ReferenceId

class CrmClsCustomerDataTest {

    private lateinit var crmDataEmpty: CrmData
    private lateinit var crmDataForUpdate: CrmData
    private lateinit var crmDataInvalid: CrmData

    @BeforeTest
    fun setup() {
        // Tous les champs de rÃ´le null => isCreateRole = true
        crmDataEmpty = CrmData(
            salesforceContactId = null,
            salesforceRoleId = null,
            contactRole = null,
            salesforceAccountId = null,
            mainContact = null
        )

        // Pour tester isUpdateRole => contactId rempli, roleId null
        crmDataForUpdate = CrmData(
            salesforceContactId = "CONTACT123",
            salesforceRoleId = null,
            contactRole = "ROLE_DRIVER",
            salesforceAccountId = "ACC123",
            mainContact = true
        )

        // Pour tester validateRoles => champ interdit rempli
        crmDataInvalid = CrmData(
            salesforceContactId = "CONTACT123",
            salesforceRoleId = "ROLE123",
            contactRole = "ROLE_DRIVER",
            salesforceAccountId = "ACC123",
            mainContact = true,
            partnerNetwork = "NOT_ALLOWED"
        )
    }

    @Test
    fun `isCreateRole should return true when all role fields are null`() {
        val customer = CrmClsCustomerData(
            id = "CUST001",
            batchid = "BATCH001",
            reconciliationId = ReconciliationId.parse("REF001-ROW001"),
            rowNumber = 1,
            rowReference = ReferenceId("ROW001"),
            crmData = crmDataEmpty,
            clsData = emptyMap(),
            crmInsertedId = null
        )

        assertTrue(customer.isCreateRole())
        assertFalse(customer.isUpdateRole())
    }

    @Test
    fun `isUpdateRole should return true when contactId is set and roleId is null`() {
        val customer = CrmClsCustomerData(
            id = "CUST002",
            batchid = "BATCH002",
            reconciliationId = ReconciliationId.parse("REF002-ROW002"),
            rowNumber = 2,
            rowReference = ReferenceId("ROW002"),
            crmData = crmDataForUpdate,
            clsData = emptyMap(),
            crmInsertedId = "CRM002"
        )

        assertTrue(customer.isUpdateRole())
        assertFalse(customer.isCreateRole())
    }

    @Test
    fun `isCrUpdate should return true when salesforceAccountId is null`() {
        val customer = CrmClsCustomerData(
            id = "CUST003",
            batchid = "BATCH003",
            reconciliationId = ReconciliationId.parse("REF003-ROW003"),
            rowNumber = 3,
            rowReference = ReferenceId("ROW003"),
            crmData = crmDataEmpty.copy(salesforceAccountId = null),
            clsData = emptyMap(),
            crmInsertedId = null
        )

        assertTrue(customer.isCrUpdate())
    }

    @Test
    fun `validateRoles should throw exception when unexpected fields are set`() {
        assertFailsWith<IllegalArgumentException> {
            CrmClsCustomerData(
                id = "CUST004",
                batchid = "BATCH004",
                reconciliationId = ReconciliationId.parse("REF004-ROW004"),
                rowNumber = 4,
                rowReference = ReferenceId("ROW004"),
                crmData = crmDataInvalid,
                clsData = emptyMap(),
                crmInsertedId = "CRM004"
            )
        }
    }
}