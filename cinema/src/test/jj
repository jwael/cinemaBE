package com.arval.blm.core.application.service

import kotlin.test.*
import com.arval.blm.core.domain.model.*
import com.arval.blm.core.domain.model.crm.*
import com.arval.blm.core.domain.model.batch.*
import java.time.Instant

class ImportCustomersServiceTest {

    private lateinit var service: ImportCustomersService
    private lateinit var recordEventRepository: InMemoryRecordStepEventRepository
    private lateinit var clockProvider: FakeClockProvider
    private lateinit var referenceIdFactory: ReferenceIdFactory
    private lateinit var crmClsCustomerDataRepository: InMemoryCrmClsCustomerDataRepository
    private lateinit var crmCustomerProvider: TestCrmCustomerProvider
    private lateinit var batchRepository: InMemoryBatchRepository

    @BeforeTest
    fun setup() {
        recordEventRepository = InMemoryRecordStepEventRepository()
        clockProvider = FakeClockProvider()
        referenceIdFactory = ReferenceIdFactory()
        crmClsCustomerDataRepository = InMemoryCrmClsCustomerDataRepository()
        crmCustomerProvider = TestCrmCustomerProvider()
        batchRepository = InMemoryBatchRepository()

        service = ImportCustomersService(
            recordStepEventRepositorySpi = recordEventRepository,
            clockProvider = clockProvider,
            referenceIdFactory = referenceIdFactory,
            crmCZsCustomerDataRepositorySpi = crmClsCustomerDataRepository,
            crmcustomerProviderSpi = crmCustomerProvider,
            batchRepositorySpi = batchRepository
        )
    }

    @Test
    fun `should process customer creation successfully`() {
        // GIVEN
        val batch = LoaderBatch(
            reference = ReferenceId("BATCH1234567"),
            triggeredBy = "user",
            countryCode = CountryCode("FR"),
            type = LoaderBatchType.CONTACTS,
            startDate = Instant.now(),
            totalContacts = 1
        )
        val personalAccount = CustomerPayload(
            rowNumber = 1,
            reconciliationId = ReconciliationId.parse("REF1234567-ROW1234567"),
            errorMessage = null
        )

        // WHEN
        service.apply(batch, listOf(personalAccount))

        // THEN
        val saved = crmClsCustomerDataRepository.saved.firstOrNull()
        assertNotNull(saved)
        assertEquals(1, recordEventRepository.saved.size)
        assertEquals(RecordStepStatus.OK, recordEventRepository.saved.first().stepStatus)
    }

    @Test
    fun `should process role creation successfully`() {
        // GIVEN
        val batch = LoaderBatch(
            reference = ReferenceId("BATCH1234567"),
            triggeredBy = "user",
            countryCode = CountryCode("FR"),
            type = LoaderBatchType.CONTACTS,
            startDate = Instant.now(),
            totalContacts = 1
        )

        val crmCustomerData = CrmCLsCustomerData(
            id = "CUST001",
            batchId = "BATCH1234567",
            reconciliationId = ReconciliationId.parse("REF1234567-ROW1234567"),
            rowNumber = 1,
            rowReference = ReferenceId("ROW1234567"),
            crmData = CrmData(forename = "Marine", surname = "Dubois"),
            clsData = emptyMap(),
            crmInsertedId = "CRM001"
        )

        val crmContactData = CrmClsContactData(
            id = "CONT001",
            batchId = "BATCH1234567",
            reconciliationId = ReconciliationId.parse("REF1234567-ROW1234567"),
            rowNumber = 2,
            rowReference = ReferenceId("ROW1234568"),
            crmData = CrmData(forename = "Paul", surname = "Martin"),
            clsData = emptyMap(),
            crmInsertedId = "CRM002"
        )

        val roleData = CrmRoleData(
            reconciliationId = ReconciliationId.parse("REF1234567-ROW1234567"),
            batchId = "BATCH1234567",
            rowNumber = 1,
            crmCustomerData = crmCustomerData,
            crmContactData = crmContactData
        )

        // WHEN
        val payload = crmCustomerProvider.createRole(roleData)

        // THEN
        assertEquals(RecordStepStatus.OK, payload.crmStatus)
        assertEquals("Role created", payload.crmMessage)
        assertNotNull(payload.crmRoleId)
    }

    @Test
    fun `should process role update successfully`() {
        // GIVEN same as creation
        val crmCustomerData = CrmCLsCustomerData(
            id = "CUST001",
            batchId = "BATCH1234567",
            reconciliationId = ReconciliationId.parse("REF1234567-ROW1234567"),
            rowNumber = 1,
            rowReference = ReferenceId("ROW1234567"),
            crmData = CrmData(forename = "Marine", surname = "Dubois"),
            clsData = emptyMap(),
            crmInsertedId = "CRM001"
        )

        val crmContactData = CrmClsContactData(
            id = "CONT001",
            batchId = "BATCH1234567",
            reconciliationId = ReconciliationId.parse("REF1234567-ROW1234567"),
            rowNumber = 2,
            rowReference = ReferenceId("ROW1234568"),
            crmData = CrmData(forename = "Paul", surname = "Martin"),
            clsData = emptyMap(),
            crmInsertedId = "CRM002"
        )

        val roleData = CrmRoleData(
            reconciliationId = ReconciliationId.parse("REF1234567-ROW1234567"),
            batchId = "BATCH1234567",
            rowNumber = 1,
            crmCustomerData = crmCustomerData,
            crmContactData = crmContactData
        )

        // WHEN
        val payload = crmCustomerProvider.updateRole(roleData)

        // THEN
        assertEquals(RecordStepStatus.OK, payload.crmStatus)
        assertEquals("Role updated", payload.crmMessage)
        assertNotNull(payload.crmRoleId)
    }
}

/**
 * Test CRM Provider (impl de CrmCustomerProviderSpi) simple pour tests.
 */
class TestCrmCustomerProvider : CrmCustomerProviderSpi {
    override fun createCrmCustomer(crmClsCustomerData: CrmCLsCustomerData) =
        CrmCustomerResponsePayload(RecordStepStatus.OK, "Customer created", "ACC123", null)

    override fun updateCrmCustomer(crmClsCustomerData: CrmCLsCustomerData) =
        CrmCustomerResponsePayload(RecordStepStatus.OK, "Customer updated", "ACC123", null)

    override fun createRole(crmRoleData: CrmRoleData) =
        CrmRoleResponsePayload(RecordStepStatus.OK, "Role created", "ROLE123")

    override fun updateRole(crmRoleData: CrmRoleData) =
        CrmRoleResponsePayload(RecordStepStatus.OK, "Role updated", "ROLE123")
}